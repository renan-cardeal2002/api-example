var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.252,1,1.784]],["body/controllers/AppController.html",[0,2.03,1,2.891,2,1.645,3,0.568,4,0.487,5,0.487,6,3.147,7,0.701,8,0.042,9,0.744,10,2.463,11,3.147,12,0.568,13,0.144,14,2.687,15,3.147,16,0.034,17,0.034]],["title/modules/AppModule.html",[18,1.252,19,1.784]],["body/modules/AppModule.html",[1,2.375,2,1.407,3,0.331,4,0.284,5,0.284,7,0.764,8,0.042,9,0.434,10,2.29,11,1.832,12,0.331,13,0.084,16,0.024,17,0.024,18,1.668,19,3.207,20,1.072,21,1.072,22,1.365,23,1.365,24,1.072,25,2.375,26,1.365,27,1.832,28,1.832,29,1.832,30,2.574,31,2.29,32,2.004,33,1.365,34,1.365,35,2.239,36,2.298,37,0.77,38,2.239,39,3.288,40,4.295,41,0.618,42,2.239,43,0.77,44,0.552,45,0.49,46,0.77,47,3.288,48,0.77,49,1.365,50,2.239,51,2.239,52,2.239,53,1.832,54,1.205,55,2.239,56,1.365,57,2.239,58,1.565,59,2.239,60,2.004,61,2.239,62,3.288,63,1.565,64,2.239,65,2.239,66,2.239,67,2.239,68,2.239,69,2.239,70,1.832,71,2.239,72,2.239]],["title/injectables/AppService.html",[10,1.401,73,0.721]],["body/injectables/AppService.html",[3,0.607,4,0.521,5,0.521,7,0.607,8,0.04,9,0.795,10,2.365,12,0.607,13,0.154,16,0.035,17,0.035,73,1.217,74,1.967,75,3.363]],["title/controllers/AuthController.html",[0,1.252,76,1.784]],["body/controllers/AuthController.html",[0,1.251,2,1.251,3,0.432,4,0.371,5,0.371,7,0.747,8,0.042,9,0.566,12,0.432,13,0.11,14,2.043,16,0.029,17,0.029,37,1.366,41,0.807,43,1.006,44,0.72,45,0.64,46,1.006,48,1.006,76,2.421,77,2.393,78,2.393,79,2.924,80,0.64,81,3.251,82,2.924,83,2.317,84,1.782,85,2.924,86,2.924,87,3.972,88,2.393,89,2.393,90,2.924,91,2.924,92,2.16,93,2.393,94,2.393,95,2.043,96,2.043,97,1.782,98,2.421,99,2.043,100,2.924,101,2.924,102,2.924,103,2.924,104,2.924,105,1.574,106,2.924,107,2.924]],["title/guards/AuthGuard.html",[60,1.784,108,2.045]],["body/guards/AuthGuard.html",[3,0.331,4,0.284,5,0.284,7,0.676,8,0.043,9,0.434,12,0.331,13,0.084,16,0.024,17,0.024,37,1.131,41,0.908,43,1.131,44,0.81,45,0.72,46,1.131,48,0.77,60,2.004,63,1.565,73,0.81,80,0.49,99,1.565,105,1.77,109,2.239,110,1.832,111,4.575,112,2.298,113,2.239,114,3.915,115,4.943,116,2.239,117,2.239,118,4.295,119,2.239,120,3.288,121,3.288,122,2.298,123,3.897,124,1.832,125,1.365,126,1.832,127,2.298,128,1.365,129,2.298,130,2.056,131,2.691,132,2.239,133,2.239,134,2.004,135,1.565,136,2.239,137,3.288,138,2.239,139,1.832,140,2.298,141,1.77,142,3.288,143,2.239,144,2.239,145,1.832,146,3.288,147,2.239,148,2.239,149,1.565,150,1.832,151,2.239]],["title/modules/AuthModule.html",[18,1.252,30,1.575]],["body/modules/AuthModule.html",[2,1.581,3,0.389,4,0.334,5,0.334,7,0.746,8,0.042,9,0.51,12,0.389,13,0.099,16,0.027,17,0.027,18,1.826,20,1.26,21,1.26,22,1.604,23,1.604,24,1.26,25,2.601,26,2.601,30,2.896,31,2.419,32,2.251,33,1.604,34,1.604,36,2.581,76,2.601,92,2.664,93,2.154,125,1.604,134,1.604,152,2.154,153,2.154,154,2.632,155,2.154,156,2.632,157,2.632,158,2.632,159,1.84,160,2.632,161,2.632,162,2.632,163,2.632,164,2.154,165,2.632,166,2.632,167,2.632,168,2.632]],["title/injectables/AuthService.html",[73,0.721,92,1.401]],["body/injectables/AuthService.html",[3,0.351,4,0.301,5,0.301,7,0.652,8,0.042,9,0.46,12,0.351,13,0.089,16,0.025,17,0.025,37,1.181,41,0.948,43,1.181,44,1.088,45,0.752,46,1.181,48,0.817,73,0.846,74,1.138,80,0.52,81,2.811,92,1.644,105,1.279,112,2.4,114,4.121,122,2.4,124,3.3,125,1.448,129,2.4,130,1.644,140,2.4,141,1.848,169,1.945,170,3.3,171,2.376,172,1.89,173,2.376,174,3.434,175,3.434,176,2.338,177,2.458,178,2.376,179,2.376,180,2.4,181,1.47,182,3.3,183,2.376,184,2.376,185,2.376,186,1.945,187,2.376,188,1.945,189,2.376,190,2.376,191,2.376,192,2.376,193,2.376,194,1.945,195,2.376,196,2.376]],["title/classes/CreateUserDto.html",[13,0.11,197,1.401]],["body/classes/CreateUserDto.html",[3,0.43,4,0.369,5,0.369,7,0.43,8,0.041,12,0.43,13,0.148,16,0.028,17,0.028,41,1.333,44,1.109,45,1.058,80,0.638,84,2.944,176,2.598,177,2.743,197,1.896,198,1.567,199,4.135,200,2.034,201,2.414,202,3.683,203,3.683,204,2.911,205,2.911,206,3.96,207,2.911,208,5.211,209,2.911,210,2.911,211,3.96,212,4.5,213,2.383]],["title/classes/HttpExceptionFilter.html",[13,0.11,214,2.045]],["body/classes/HttpExceptionFilter.html",[3,0.408,4,0.351,5,0.351,7,0.565,8,0.042,9,0.535,12,0.408,13,0.104,16,0.027,17,0.027,37,1.315,41,0.763,43,0.951,44,0.681,45,0.606,46,0.951,48,0.951,49,1.685,70,2.263,80,0.606,128,2.33,130,2.375,135,2.671,141,1.488,149,3.303,186,3.128,188,3.585,198,1.488,214,2.671,215,3.128,216,3.128,217,2.263,218,4.381,219,3.822,220,4.726,221,4.381,222,4.726,223,2.765,224,2.765,225,3.128,226,1.932,227,2.765,228,2.765,229,2.765,230,2.765,231,2.765,232,2.765,233,2.765,234,2.765,235,2.765,236,2.765,237,2.765]],["title/injectables/LoggerMiddleware.html",[73,0.721,238,2.045]],["body/injectables/LoggerMiddleware.html",[3,0.491,4,0.421,5,0.421,7,0.491,8,0.042,9,0.643,12,0.491,13,0.124,16,0.031,17,0.031,37,1.487,41,0.917,43,1.142,44,0.818,45,0.728,46,1.142,48,1.142,49,2.93,73,1.065,74,1.591,80,0.728,128,2.025,238,3.021,239,2.719,240,3.538,241,3.538,242,3.934,243,4.167,244,3.322,245,2.719,246,2.719,247,3.538]],["title/injectables/TimeRequestMiddleware.html",[56,1.784,73,0.721]],["body/injectables/TimeRequestMiddleware.html",[3,0.402,4,0.345,5,0.345,7,0.558,8,0.042,9,0.526,12,0.402,13,0.102,16,0.027,17,0.027,37,1.299,41,0.751,43,0.935,44,0.67,45,0.596,46,0.935,48,0.935,49,1.657,56,2.303,58,2.64,73,0.931,74,1.302,80,0.596,128,1.657,130,2.079,135,3.446,225,4.036,226,1.9,240,3.092,241,3.092,242,3.554,243,3.84,245,2.225,247,3.092,248,3.092,249,2.225,250,4.692,251,2.719,252,3.778,253,3.778,254,2.719,255,3.778,256,3.778,257,2.719,258,2.719,259,2.719,260,2.719,261,2.719,262,2.719]],["title/classes/UpdateUserDto.html",[13,0.11,83,1.401]],["body/classes/UpdateUserDto.html",[3,0.568,4,0.487,5,0.487,7,0.701,8,0.041,12,0.568,13,0.144,16,0.034,17,0.034,83,2.271,96,2.687,97,2.344,197,1.841,198,2.069,200,2.687,263,4.743,264,4.743,265,3.845,266,3.147,267,3.147,268,2.687]],["title/classes/User.html",[13,0.11,181,1.252]],["body/classes/User.html",[3,0.393,4,0.338,5,0.338,7,0.393,8,0.042,12,0.55,13,0.1,16,0.027,17,0.027,41,1.284,44,1.058,45,1.019,54,1.434,80,0.584,84,2.835,130,1.276,134,3.332,176,2.543,177,2.618,181,1.594,198,1.434,201,2.27,202,3.515,203,3.515,269,1.862,270,4.651,271,2.664,272,3.725,273,2.664,274,3.725,275,3.725,276,2.664,277,2.664,278,4.894,279,3.049,280,2.664,281,4.651,282,1.624,283,2.18]],["title/controllers/UserController.html",[0,1.252,284,1.784]],["body/controllers/UserController.html",[0,0.851,2,0.851,3,0.294,4,0.252,5,0.252,7,0.676,8,0.042,9,0.385,12,0.294,13,0.074,14,1.39,15,1.628,16,0.022,17,0.022,37,1.035,41,1.201,43,1.393,44,0.998,45,0.887,46,1.393,48,1.497,78,1.628,80,0.436,83,2.345,84,2.652,88,2.464,89,2.464,94,1.628,95,1.39,97,1.835,98,1.835,99,1.39,105,2.342,172,1.555,176,2.4,181,0.851,197,2.192,268,2.104,284,1.835,285,1.628,286,3.315,287,2.464,288,2.464,289,2.464,290,1.628,291,1.989,292,1.989,293,1.989,294,1.628,295,3.011,296,1.989,297,3.747,298,1.628,299,3.011,300,1.989,301,1.628,302,3.011,303,1.989,304,1.989,305,1.989,306,1.989,307,1.628,308,1.628,309,1.628,310,1.989,311,1.989,312,1.989,313,1.989,314,1.989,315,1.989,316,1.989,317,1.989,318,1.989,319,1.989,320,1.989]],["title/modules/UserModule.html",[18,1.252,31,1.401]],["body/modules/UserModule.html",[2,1.67,3,0.421,4,0.361,5,0.361,7,0.74,8,0.042,9,0.551,12,0.421,13,0.107,16,0.028,17,0.028,18,1.904,20,1.364,21,1.364,22,1.736,23,1.736,24,1.364,25,2.712,26,2.712,31,2.538,32,2.378,33,1.736,34,1.736,36,1.991,44,0.702,53,2.331,54,1.533,172,2.413,181,1.219,194,2.331,279,2.331,282,2.378,284,2.712,307,2.331,321,2.331,322,2.331,323,2.331,324,2.848,325,2.848,326,2.331,327,2.848]],["title/injectables/UserService.html",[73,0.721,172,1.252]],["body/injectables/UserService.html",[3,0.2,4,0.172,5,0.172,7,0.606,8,0.042,9,0.262,12,0.2,13,0.051,16,0.016,17,0.016,37,0.765,41,1.182,43,1.41,44,1.152,45,0.898,46,1.41,48,1.41,54,0.729,73,0.548,74,0.649,80,0.297,83,2.05,97,1.355,105,2.207,112,0.947,122,3.447,129,0.947,130,1.065,140,2.865,141,0.729,145,3.356,149,2.865,150,4.037,170,4.33,172,0.952,176,2.473,177,1.994,180,1.554,181,0.58,182,3.356,197,1.73,268,1.554,286,2.678,287,1.82,288,1.82,289,1.82,290,1.82,294,1.82,297,2.314,298,1.82,301,1.82,308,1.109,309,1.109,326,1.109,328,1.109,329,2.224,330,2.224,331,1.355,332,3.272,333,1.355,334,2.224,335,1.355,336,1.355,337,1.355,338,2.224,339,1.355,340,2.224,341,1.355,342,1.355,343,1.355,344,1.355,345,1.355,346,1.355,347,2.224,348,1.355,349,1.355,350,1.355,351,1.355,352,1.355,353,1.355,354,1.355,355,1.355,356,2.224,357,1.355,358,1.355,359,1.355,360,1.355]],["title/coverage.html",[361,2.777]],["body/coverage.html",[0,1.762,1,1.502,5,0.313,6,2.017,8,0.041,10,1.18,13,0.168,16,0.025,17,0.025,24,1.18,45,0.54,56,1.502,58,1.723,60,1.502,73,1.171,75,2.017,76,1.502,77,2.017,83,1.18,92,1.18,96,1.723,98,1.502,108,1.723,110,2.017,127,1.723,141,1.327,159,1.723,169,2.017,172,1.055,181,1.055,197,1.18,199,2.017,200,2.464,214,1.723,215,2.017,216,2.017,217,2.017,238,1.723,239,2.017,246,2.017,248,2.017,249,2.017,269,2.464,282,1.502,284,1.502,285,2.017,328,2.017,361,1.723,362,2.465,363,2.465,364,2.465,365,5.71,366,5.206,367,2.886,368,4.493,369,4.493,370,3.526,371,2.017,372,2.017,373,3.526,374,2.465,375,2.465,376,2.465,377,2.465]],["title/dependencies.html",[21,1.683,378,2.008]],["body/dependencies.html",[8,0.042,9,0.685,13,0.169,16,0.032,17,0.032,21,1.693,54,1.903,63,2.471,95,2.471,125,2.155,126,2.894,180,2.471,213,2.894,226,2.471,266,2.894,267,2.894,379,4.951,380,3.536,381,3.536,382,3.536,383,3.536,384,3.536,385,3.536,386,3.536,387,3.536,388,3.536,389,3.536,390,3.536,391,3.536]],["title/miscellaneous/functions.html",[392,1.495,393,2.876]],["body/miscellaneous/functions.html",[8,0.037,16,0.037,17,0.037,24,2.591,80,0.947,372,3.539,392,2.636,393,3.539,394,4.324]],["title/index.html",[80,0.537,395,2.454,396,2.454]],["body/index.html",[4,0.349,8,0.041,16,0.027,17,0.027,361,1.924,397,2.753,398,2.753,399,3.811,400,2.753,401,2.753,402,2.753,403,2.753,404,2.753,405,2.753,406,2.253,407,4.371,408,2.753,409,2.753,410,2.753,411,2.753,412,4.371,413,5.253,414,2.753,415,2.753,416,2.753,417,5.124,418,2.753,419,2.753,420,3.811,421,2.753,422,2.753,423,2.753,424,2.753,425,3.811,426,3.811,427,2.753,428,2.753,429,2.753,430,3.811,431,3.811,432,2.753,433,2.753,434,2.753,435,2.753,436,2.753,437,2.253,438,2.753,439,2.753,440,2.753,441,2.753,442,2.753,443,2.753,444,2.753,445,2.753,446,2.753,447,2.753,448,2.253,449,2.753,450,2.753,451,2.753,452,2.753,453,2.753,454,2.753,455,2.253]],["title/modules.html",[20,1.903]],["body/modules.html",[8,0.035,16,0.035,17,0.035,19,2.504,20,1.967,30,2.211,31,1.967,437,4.334,456,5.295,457,5.295,458,5.295]],["title/overview.html",[459,3.252]],["body/overview.html",[2,1.263,8,0.04,10,2.17,16,0.029,17,0.029,18,1.263,19,3.317,20,1.413,21,1.413,22,1.798,23,1.798,24,1.413,25,1.798,26,1.798,27,2.415,28,2.415,29,2.415,30,2.929,31,2.562,32,2.436,33,1.798,34,1.798,74,1.413,92,2.562,108,2.062,139,2.415,152,2.415,153,2.415,155,2.415,172,2.29,198,1.588,321,2.415,322,2.415,323,2.415,459,2.415,460,3.996,461,2.95,462,2.95]],["title/properties.html",[201,2.142,378,2.008]],["body/properties.html",[8,0.041,16,0.036,17,0.036,201,2.585,406,3.471,448,3.471,455,3.471,463,4.241,464,4.241,465,4.241]],["title/miscellaneous/variables.html",[392,1.495,466,2.876]],["body/miscellaneous/variables.html",[8,0.042,16,0.032,17,0.032,45,0.972,80,0.758,98,2.706,127,3.103,131,2.833,134,2.11,159,3.103,164,2.833,176,1.657,269,2.419,282,2.706,283,2.833,367,2.833,371,2.833,392,2.11,466,2.833,467,4.44,468,3.461,469,3.461,470,5.171,471,5.171,472,3.461,473,3.461,474,3.461]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/TimeRequestMiddleware.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":365,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":464,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":387,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":390,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":386,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":366,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":369,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":370,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":373,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":374,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":375,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":139,"title":{},"body":{"guards/AuthGuard.html":{},"overview.html":{}}}],["10.0.0",{"_index":379,"title":{},"body":{"dependencies.html":{}}}],["10.0.6",{"_index":381,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":380,"title":{},"body":{"dependencies.html":{}}}],["1000",{"_index":257,"title":{},"body":{"injectables/TimeRequestMiddleware.html":{}}}],["10h",{"_index":168,"title":{},"body":{"modules/AuthModule.html":{}}}],["3",{"_index":460,"title":{},"body":{"overview.html":{}}}],["4",{"_index":462,"title":{},"body":{"overview.html":{}}}],["5",{"_index":461,"title":{},"body":{"overview.html":{}}}],["5.1.1",{"_index":384,"title":{},"body":{"dependencies.html":{}}}],["7.3.1",{"_index":383,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":391,"title":{},"body":{"dependencies.html":{}}}],["access_token",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["amazing",{"_index":438,"title":{},"body":{"index.html":{}}}],["apitags",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["apitags('auth",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('user",{"_index":310,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":415,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":405,"title":{},"body":{"index.html":{}}}],["apply(timerequestmiddleware",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["appmodule",{"_index":19,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argumentshost",{"_index":222,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["async",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":158,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["authcontroller",{"_index":76,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":60,"title":{"guards/AuthGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"coverage.html":{}}}],["authmodule",{"_index":30,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":448,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":92,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["backers",{"_index":439,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt",{"_index":348,"title":{},"body":{"injectables/UserService.html":{}}}],["bcrypt.hash(createuserdto.password",{"_index":350,"title":{},"body":{"injectables/UserService.html":{}}}],["body",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":121,"title":{},"body":{"guards/AuthGuard.html":{}}}],["bootstrap",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":458,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":456,"title":{},"body":{"modules.html":{}}}],["building",{"_index":400,"title":{},"body":{"index.html":{}}}],["canactivate",{"_index":111,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canactivate(context",{"_index":117,"title":{},"body":{"guards/AuthGuard.html":{}}}],["catch",{"_index":149,"title":{},"body":{"guards/AuthGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/UserService.html":{}}}],["catch(exception",{"_index":219,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["class",{"_index":13,"title":{"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/TimeRequestMiddleware.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":198,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":152,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":153,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":154,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":155,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":321,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":323,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":322,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["configure",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["console.log",{"_index":258,"title":{},"body":{"injectables/TimeRequestMiddleware.html":{}}}],["const",{"_index":130,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/TimeRequestMiddleware.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["constants",{"_index":160,"title":{},"body":{"modules/AuthModule.html":{}}}],["constructor",{"_index":112,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["constructor(@injectmodel(user.name",{"_index":346,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(jwtservice",{"_index":113,"title":{},"body":{"guards/AuthGuard.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["constructor(usermodel",{"_index":331,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(usersservice",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{}}}],["consumer",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["context",{"_index":120,"title":{},"body":{"guards/AuthGuard.html":{}}}],["context.gethandler",{"_index":133,"title":{},"body":{"guards/AuthGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":136,"title":{},"body":{"guards/AuthGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('user",{"_index":311,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["coverage",{"_index":361,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":268,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["create(@body",{"_index":312,"title":{},"body":{"controllers/UserController.html":{}}}],["create(createuserdto",{"_index":290,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createduser",{"_index":351,"title":{},"body":{"injectables/UserService.html":{}}}],["createduser.save",{"_index":353,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto",{"_index":197,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserdto.password",{"_index":349,"title":{},"body":{"injectables/UserService.html":{}}}],["ctx",{"_index":227,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":230,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":229,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["date().toisostring",{"_index":236,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["date.now",{"_index":253,"title":{},"body":{"injectables/TimeRequestMiddleware.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decoded",{"_index":146,"title":{},"body":{"guards/AuthGuard.html":{}}}],["decorators",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{}}}],["default",{"_index":470,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/TimeRequestMiddleware.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":306,"title":{},"body":{"controllers/UserController.html":{}}}],["delete(':id",{"_index":299,"title":{},"body":{"controllers/UserController.html":{}}}],["dependencies",{"_index":21,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":406,"title":{},"body":{"index.html":{},"properties.html":{}}}],["development",{"_index":416,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":362,"title":{},"body":{"coverage.html":{}}}],["dto/create",{"_index":308,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/update",{"_index":309,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["e2e",{"_index":427,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":401,"title":{},"body":{"index.html":{}}}],["email",{"_index":202,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["encontrado",{"_index":144,"title":{},"body":{"guards/AuthGuard.html":{}}}],["endtime",{"_index":255,"title":{},"body":{"injectables/TimeRequestMiddleware.html":{}}}],["entities/user.entity",{"_index":326,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["error",{"_index":150,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/UserService.html":{}}}],["example",{"_index":412,"title":{},"body":{"index.html":{}}}],["exception",{"_index":224,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":217,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:11",{"_index":223,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":231,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception/http",{"_index":216,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["exceptionfilter",{"_index":218,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exec",{"_index":357,"title":{},"body":{"injectables/UserService.html":{}}}],["executioncontext",{"_index":118,"title":{},"body":{"guards/AuthGuard.html":{}}}],["expiresin",{"_index":167,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/TimeRequestMiddleware.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":226,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/TimeRequestMiddleware.html":{},"dependencies.html":{}}}],["extends",{"_index":263,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["false",{"_index":275,"title":{},"body":{"classes/User.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/TimeRequestMiddleware.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["financas",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["findall",{"_index":286,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findbyid",{"_index":287,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findbyid(@param('id",{"_index":315,"title":{},"body":{"controllers/UserController.html":{}}}],["findbyid(id",{"_index":294,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findbyname",{"_index":329,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyname(name",{"_index":338,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyuser",{"_index":330,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyuser(name",{"_index":340,"title":{},"body":{"injectables/UserService.html":{}}}],["forroutes",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["framework",{"_index":399,"title":{},"body":{"index.html":{}}}],["function",{"_index":246,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["functions",{"_index":393,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gards/auth/auth.guard",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["gards/auth/auth.module",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["get(':id",{"_index":295,"title":{},"body":{"controllers/UserController.html":{}}}],["getting",{"_index":395,"title":{"index.html":{}},"body":{}}],["global",{"_index":163,"title":{},"body":{"modules/AuthModule.html":{}}}],["grow",{"_index":434,"title":{},"body":{"index.html":{}}}],["guard",{"_index":108,"title":{"guards/AuthGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":109,"title":{},"body":{"guards/AuthGuard.html":{}}}],["here",{"_index":445,"title":{},"body":{"index.html":{}}}],["host",{"_index":221,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":228,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpcode",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok)@post('login')@public",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception",{"_index":220,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpexceptionfilter",{"_index":214,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["https://nestjs.com",{"_index":452,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpstatus.unauthorized",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{}}}],["id",{"_index":297,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":363,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":128,"title":{},"body":{"guards/AuthGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/TimeRequestMiddleware.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/TimeRequestMiddleware.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":80,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/TimeRequestMiddleware.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/TimeRequestMiddleware.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["injectable",{"_index":73,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/TimeRequestMiddleware.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/TimeRequestMiddleware.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":74,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/TimeRequestMiddleware.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectmodel",{"_index":345,"title":{},"body":{"injectables/UserService.html":{}}}],["installation",{"_index":411,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":414,"title":{},"body":{"index.html":{}}}],["inválido",{"_index":151,"title":{},"body":{"guards/AuthGuard.html":{}}}],["inválidos",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["is_public_key",{"_index":127,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isemail",{"_index":211,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotempty",{"_index":208,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotempty()@isemail",{"_index":204,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotempty()@isstring",{"_index":206,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ispublic",{"_index":131,"title":{},"body":{"guards/AuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":212,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["join",{"_index":441,"title":{},"body":{"index.html":{}}}],["json.parse(json.stringify(exception.getresponse())).message",{"_index":232,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["jwtconstants",{"_index":159,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":165,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule",{"_index":157,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":162,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":114,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["kamil",{"_index":449,"title":{},"body":{"index.html":{}}}],["legend",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["license",{"_index":455,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":431,"title":{},"body":{"index.html":{}}}],["loggermiddleware",{"_index":238,"title":{"injectables/LoggerMiddleware.html":{}},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["matching",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/TimeRequestMiddleware.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{}}}],["metadata",{"_index":389,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["methods",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/TimeRequestMiddleware.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["middlewareconsumer",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["middlewares/time",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["miscellaneous",{"_index":392,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":430,"title":{},"body":{"index.html":{}}}],["mode",{"_index":420,"title":{},"body":{"index.html":{}}}],["model",{"_index":332,"title":{},"body":{"injectables/UserService.html":{}}}],["module",{"_index":18,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":20,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["mongoose",{"_index":344,"title":{},"body":{"injectables/UserService.html":{}}}],["mongoosemodule",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forfeature",{"_index":327,"title":{},"body":{"modules/UserModule.html":{}}}],["mongoosemodule.forroot('mongodb://localhost/app",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":444,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":450,"title":{},"body":{"index.html":{}}}],["name",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/TimeRequestMiddleware.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["nest",{"_index":407,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":454,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/TimeRequestMiddleware.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":125,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":266,"title":{},"body":{"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":382,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":247,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/TimeRequestMiddleware.html":{}}}],["new",{"_index":141,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["next",{"_index":243,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/TimeRequestMiddleware.html":{}}}],["nextfunction",{"_index":250,"title":{},"body":{"injectables/TimeRequestMiddleware.html":{}}}],["node.js",{"_index":398,"title":{},"body":{"index.html":{}}}],["npm",{"_index":413,"title":{},"body":{"index.html":{}}}],["não",{"_index":143,"title":{},"body":{"guards/AuthGuard.html":{}}}],["object",{"_index":473,"title":{},"body":{"miscellaneous/variables.html":{}}}],["observable",{"_index":123,"title":{},"body":{"guards/AuthGuard.html":{}}}],["open",{"_index":432,"title":{},"body":{"index.html":{}}}],["optional",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/TimeRequestMiddleware.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["ou",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["out",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":459,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":378,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":305,"title":{},"body":{"controllers/UserController.html":{}}}],["parameters",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/TimeRequestMiddleware.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["partialtype",{"_index":265,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["partialtype(createuserdto",{"_index":264,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["password",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["patch",{"_index":304,"title":{},"body":{"controllers/UserController.html":{}}}],["patch(':id",{"_index":302,"title":{},"body":{"controllers/UserController.html":{}}}],["path",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"classes/HttpExceptionFilter.html":{}}}],["payload",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["please",{"_index":442,"title":{},"body":{"index.html":{}}}],["post",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["post('login",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@public",{"_index":291,"title":{},"body":{"controllers/UserController.html":{}}}],["prefix",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["private",{"_index":129,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["production",{"_index":422,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":397,"title":{},"body":{"index.html":{}}}],["project",{"_index":433,"title":{},"body":{"index.html":{}}}],["promise",{"_index":122,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["prop",{"_index":278,"title":{},"body":{"classes/User.html":{}}}],["prop({required",{"_index":270,"title":{},"body":{"classes/User.html":{}}}],["properties",{"_index":201,"title":{"properties.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"properties.html":{}}}],["provide",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["providers",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["public",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["read",{"_index":443,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/UserController.html":{}}}],["reflect",{"_index":388,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":115,"title":{},"body":{"guards/AuthGuard.html":{}}}],["remove",{"_index":288,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["remove(@param('id",{"_index":319,"title":{},"body":{"controllers/UserController.html":{}}}],["remove(id",{"_index":298,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["repository",{"_index":410,"title":{},"body":{"index.html":{}}}],["req",{"_index":245,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/TimeRequestMiddleware.html":{}}}],["req.method",{"_index":259,"title":{},"body":{"injectables/TimeRequestMiddleware.html":{}}}],["req.url",{"_index":260,"title":{},"body":{"injectables/TimeRequestMiddleware.html":{}}}],["request",{"_index":135,"title":{},"body":{"guards/AuthGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/TimeRequestMiddleware.html":{}}}],["request.headers.authorization?.split",{"_index":138,"title":{},"body":{"guards/AuthGuard.html":{}}}],["request.middleware",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["request.middleware.ts",{"_index":249,"title":{},"body":{"injectables/TimeRequestMiddleware.html":{},"coverage.html":{}}}],["request.middleware.ts:6",{"_index":251,"title":{},"body":{"injectables/TimeRequestMiddleware.html":{}}}],["request.url",{"_index":237,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["request.user",{"_index":148,"title":{},"body":{"guards/AuthGuard.html":{}}}],["request/time",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"injectables/TimeRequestMiddleware.html":{},"coverage.html":{}}}],["requestmethod",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod.all",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["required",{"_index":281,"title":{},"body":{"classes/User.html":{}}}],["res",{"_index":242,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/TimeRequestMiddleware.html":{}}}],["res.on('finish",{"_index":254,"title":{},"body":{"injectables/TimeRequestMiddleware.html":{}}}],["reset",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["response",{"_index":225,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/TimeRequestMiddleware.html":{}}}],["response.status(status).json",{"_index":233,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["responsetime",{"_index":256,"title":{},"body":{"injectables/TimeRequestMiddleware.html":{}}}],["responsetime}ms",{"_index":262,"title":{},"body":{"injectables/TimeRequestMiddleware.html":{}}}],["results",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/TimeRequestMiddleware.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/TimeRequestMiddleware.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["run",{"_index":417,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":126,"title":{},"body":{"guards/AuthGuard.html":{},"dependencies.html":{}}}],["salt",{"_index":347,"title":{},"body":{"injectables/UserService.html":{}}}],["scalable",{"_index":402,"title":{},"body":{"index.html":{}}}],["schema",{"_index":279,"title":{},"body":{"classes/User.html":{},"modules/UserModule.html":{}}}],["schemafactory",{"_index":280,"title":{},"body":{"classes/User.html":{}}}],["schemafactory.createforclass(user",{"_index":283,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["secret",{"_index":164,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["select",{"_index":274,"title":{},"body":{"classes/User.html":{}}}],["select('+password').exec",{"_index":358,"title":{},"body":{"injectables/UserService.html":{}}}],["senha",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["senhasecreta",{"_index":474,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server",{"_index":403,"title":{},"body":{"index.html":{}}}],["setmetadata(is_public_key",{"_index":472,"title":{},"body":{"miscellaneous/variables.html":{}}}],["side",{"_index":404,"title":{},"body":{"index.html":{}}}],["signin",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin(@body",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(name",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{}}}],["signin(signindto",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{}}}],["signindto",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{}}}],["signindto.password",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{}}}],["signoptions",{"_index":166,"title":{},"body":{"modules/AuthModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/TimeRequestMiddleware.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["sponsors",{"_index":436,"title":{},"body":{"index.html":{}}}],["src/.../constants.ts",{"_index":468,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":394,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../public.decorator.ts",{"_index":467,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.entity.ts",{"_index":469,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:27",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":75,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/common/decorators/public/public.decorator",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"controllers/UserController.html":{}}}],["src/common/decorators/public/public.decorator.ts",{"_index":367,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/exceptions/http",{"_index":215,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/gards/auth/auth.controller.ts",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/gards/auth/auth.controller.ts:15",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/gards/auth/auth.guard.ts",{"_index":110,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["src/gards/auth/auth.guard.ts:13",{"_index":116,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/gards/auth/auth.guard.ts:19",{"_index":119,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/gards/auth/auth.module.ts",{"_index":156,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/gards/auth/auth.service.ts",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/gards/auth/auth.service.ts:13",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/gards/auth/auth.service.ts:7",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/gards/auth/constants.ts",{"_index":371,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":372,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/middlewares/logger/logger.middleware.ts",{"_index":239,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["src/middlewares/logger/logger.middleware.ts:5",{"_index":244,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["src/middlewares/time",{"_index":248,"title":{},"body":{"injectables/TimeRequestMiddleware.html":{},"coverage.html":{}}}],["src/user/dto/create",{"_index":199,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dto/update",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/user/entities/user.entity.ts",{"_index":269,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/entities/user.entity.ts:12",{"_index":271,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:15",{"_index":276,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:6",{"_index":273,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:9",{"_index":277,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.controller.ts",{"_index":285,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:23",{"_index":292,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:28",{"_index":293,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:33",{"_index":296,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:38",{"_index":303,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:43",{"_index":300,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module",{"_index":161,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/user/user.module.ts",{"_index":324,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/user/user.service.ts",{"_index":328,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:10",{"_index":333,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:13",{"_index":335,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:25",{"_index":336,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:33",{"_index":337,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:41",{"_index":341,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:49",{"_index":339,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:57",{"_index":343,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:65",{"_index":342,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":418,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":421,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":423,"title":{},"body":{"index.html":{}}}],["started",{"_index":396,"title":{"index.html":{}},"body":{}}],["starter",{"_index":409,"title":{},"body":{"index.html":{}}}],["starttime",{"_index":252,"title":{},"body":{"injectables/TimeRequestMiddleware.html":{}}}],["statements",{"_index":364,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{}}}],["statuscode",{"_index":234,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["stay",{"_index":446,"title":{},"body":{"index.html":{}}}],["string",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["support",{"_index":437,"title":{},"body":{"index.html":{},"modules.html":{}}}],["surname",{"_index":203,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["svg",{"_index":457,"title":{},"body":{"modules.html":{}}}],["table",{"_index":377,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":376,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":426,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":429,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":428,"title":{},"body":{"index.html":{}}}],["tests",{"_index":425,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":435,"title":{},"body":{"index.html":{}}}],["this.authservice.signin(signindto.name",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.jwtservice.signasync(payload",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(token",{"_index":147,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.reflector.get",{"_index":132,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.usermodel(createuserdto",{"_index":352,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.find",{"_index":354,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findbyid(id",{"_index":355,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findbyidanddelete(id",{"_index":360,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findbyidandupdate(id",{"_index":359,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findone",{"_index":356,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.create(createuserdto",{"_index":313,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findall",{"_index":314,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findbyid(id",{"_index":316,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.remove(id",{"_index":320,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.update(id",{"_index":318,"title":{},"body":{"controllers/UserController.html":{}}}],["this.usersservice.findbyname(name",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":140,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["time",{"_index":261,"title":{},"body":{"injectables/TimeRequestMiddleware.html":{}}}],["timerequestmiddleware",{"_index":56,"title":{"injectables/TimeRequestMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/TimeRequestMiddleware.html":{},"coverage.html":{}}}],["timestamp",{"_index":235,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["token",{"_index":137,"title":{},"body":{"guards/AuthGuard.html":{}}}],["touch",{"_index":447,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":385,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":134,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":145,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/UserService.html":{}}}],["twitter",{"_index":453,"title":{},"body":{"index.html":{}}}],["type",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/TimeRequestMiddleware.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":267,"title":{},"body":{"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":408,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":124,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["unauthorizedexception('token",{"_index":142,"title":{},"body":{"guards/AuthGuard.html":{}}}],["unique",{"_index":272,"title":{},"body":{"classes/User.html":{}}}],["unit",{"_index":424,"title":{},"body":{"index.html":{}}}],["unlicensed",{"_index":465,"title":{},"body":{"properties.html":{}}}],["update",{"_index":289,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["update(@param('id",{"_index":317,"title":{},"body":{"controllers/UserController.html":{}}}],["update(id",{"_index":301,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateuserdto",{"_index":83,"title":{"classes/UpdateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["use",{"_index":240,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/TimeRequestMiddleware.html":{}}}],["use(req",{"_index":241,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/TimeRequestMiddleware.html":{}}}],["useclass",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":181,"title":{"classes/User.html":{}},"body":{"injectables/AuthService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user.controller",{"_index":325,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":200,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:10",{"_index":210,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:14",{"_index":205,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:17",{"_index":209,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:6",{"_index":207,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.name",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{},"modules/UserModule.html":{}}}],["user.password",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.service",{"_index":307,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user/user.module",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["usercontroller",{"_index":284,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["usermodel",{"_index":334,"title":{},"body":{"injectables/UserService.html":{}}}],["usermodule",{"_index":31,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["userschema",{"_index":282,"title":{},"body":{"classes/User.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":172,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["usersservice",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{}}}],["usuário",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":213,"title":{},"body":{"classes/CreateUserDto.html":{},"dependencies.html":{}}}],["value",{"_index":471,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":368,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":466,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":463,"title":{},"body":{"properties.html":{}}}],["void",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/TimeRequestMiddleware.html":{}}}],["watch",{"_index":419,"title":{},"body":{"index.html":{}}}],["website",{"_index":451,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":440,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.module.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                consumer\n                                            \n                                                        MiddlewareConsumer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, RequestMethod } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UserModule } from './user/user.module';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { AuthModule } from './gards/auth/auth.module';\nimport { TimeRequestMiddleware } from './middlewares/time-request/time-request.middleware';\nimport { AuthGuard } from './gards/auth/auth.guard';\nimport { APP_GUARD } from '@nestjs/core';\n\n@Module({\n  imports: [\n    MongooseModule.forRoot('mongodb://localhost/app-financas'),\n    UserModule,\n    AuthModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    {\n      provide: APP_GUARD,\n      useClass: AuthGuard,\n    },\n  ],\n})\nexport class AppModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer\n      .apply(TimeRequestMiddleware)\n      .forRoutes({ path: '*', method: RequestMethod.ALL });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/gards/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Post('login')@Public()\n                \n            \n\n                    \n                        \n                            Defined in src/gards/auth/auth.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, HttpCode, HttpStatus } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { ApiTags } from '@nestjs/swagger';\nimport { UpdateUserDto } from 'src/user/dto/update-user.dto';\nimport { Public } from 'src/common/decorators/public/public.decorator';\n\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @HttpCode(HttpStatus.OK)\n  @Post('login')\n  @Public()\n  signIn(@Body() signInDto: UpdateUserDto) {\n    return this.authService.signIn(signInDto.name, signInDto.password);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/gards/auth/auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/gards/auth/auth.guard.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/gards/auth/auth.guard.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     boolean | Promise | Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  Injectable,\n  CanActivate,\n  ExecutionContext,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { JwtService } from '@nestjs/jwt';\nimport { Observable } from 'rxjs';\nimport { IS_PUBLIC_KEY } from 'src/common/decorators/public/public.decorator';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private jwtService: JwtService,\n    private reflector: Reflector,\n  ) {}\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const isPublic = this.reflector.get(\n      IS_PUBLIC_KEY,\n      context.getHandler(),\n    );\n    if (isPublic) {\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const token = request.headers.authorization?.split(' ')[1];\n\n    if (!token) {\n      throw new UnauthorizedException('Token não encontrado.');\n    }\n\n    try {\n      const decoded = this.jwtService.verify(token);\n      request.user = decoded;\n      return true;\n    } catch (error) {\n      throw new UnauthorizedException('Token Inválido');\n    }\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/gards/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { JwtModule } from '@nestjs/jwt';\nimport { AuthController } from './auth.controller';\nimport { jwtConstants } from './constants';\nimport { UserModule } from 'src/user/user.module';\n\n@Module({\n  imports: [\n    UserModule,\n    JwtModule.register({\n      global: true,\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '10h' },\n    }),\n  ],\n  providers: [AuthService],\n  controllers: [AuthController],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/gards/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UserService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/gards/auth/auth.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(name: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/gards/auth/auth.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { UserService } from 'src/user/user.service';\nimport { JwtService } from '@nestjs/jwt';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UserService,\n    private jwtService: JwtService,\n  ) {}\n\n  async signIn(name: string, password: string): Promise {\n    const user = await this.usersService.findByName(name);\n\n    if (!user || !(await bcrypt.compare(password, user.password))) {\n      throw new UnauthorizedException();\n      // throw new UnauthorizedException({\n      //   status: HttpStatus.UNAUTHORIZED,\n      //   message: 'Usuário ou senha inválidos',\n      // });\n    }\n\n    const payload = { name: user.name };\n    return { access_token: await this.jwtService.signAsync(payload) };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                surname\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        surname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreateUserDto {\n  @IsNotEmpty()\n  @IsString()\n  name: string;\n\n  @IsNotEmpty()\n  @IsString()\n  surname: string;\n\n  @IsNotEmpty()\n  @IsEmail()\n  email: string;\n\n  @IsNotEmpty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exceptions/http-exception/http-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/exceptions/http-exception/http-exception.filter.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        HttpException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch()\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n    const message = JSON.parse(JSON.stringify(exception.getResponse())).message;\n\n    response.status(status).json({\n      statusCode: status,\n      message: message,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerMiddleware.html":{"url":"injectables/LoggerMiddleware.html","title":"injectable - LoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/middlewares/logger/logger.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: any, res: any, next: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/middlewares/logger/logger.middleware.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\n\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n  use(req: any, res: any, next: () => void) {\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TimeRequestMiddleware.html":{"url":"injectables/TimeRequestMiddleware.html","title":"injectable - TimeRequestMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TimeRequestMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/middlewares/time-request/time-request.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n                    \n                        \n                            Defined in src/middlewares/time-request/time-request.middleware.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        NextFunction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\n\n@Injectable()\nexport class TimeRequestMiddleware implements NestMiddleware {\n  use(req: Request, res: Response, next: NextFunction) {\n    const startTime = Date.now();\n\n    res.on('finish', () => {\n      const endTime = Date.now();\n      const responseTime = endTime - startTime;\n\n      if (responseTime > 1000) {\n        console.log(\n          `Request ${req.method} ${req.url} - Response Time: ${responseTime}ms`,\n        );\n      }\n    });\n\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                surname\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        surname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\n\n@Schema()\nexport class User {\n  @Prop({ required: true, unique: true })\n  name: string;\n\n  @Prop({ required: true })\n  surname: string;\n\n  @Prop({ required: true })\n  email: string;\n\n  @Prop({ required: true, select: false })\n  password: string;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findById\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@Public()\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { Public } from 'src/common/decorators/public/public.decorator';\nimport { ApiTags } from '@nestjs/swagger';\n\n@ApiTags('user')\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Post()\n  @Public()\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.userService.create(createUserDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.userService.findAll();\n  }\n\n  @Get(':id')\n  findById(@Param('id') id: string) {\n    return this.userService.findById(id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n    return this.userService.update(id, updateUserDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.userService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\nimport { User, UserSchema } from './entities/user.entity';\nimport { MongooseModule } from '@nestjs/mongoose';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n  ],\n  controllers: [UserController],\n  providers: [UserService],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findByName\n                            \n                            \n                                    Async\n                                findByUser\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByName\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByName(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByUser(name: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User } from './entities/user.entity';\nimport { Model } from 'mongoose';\nimport { InjectModel } from '@nestjs/mongoose';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class UserService {\n  constructor(@InjectModel(User.name) private userModel: Model) {}\n\n  async create(createUserDto: CreateUserDto): Promise {\n    try {\n      const salt = await bcrypt.genSalt();\n      createUserDto.password = await bcrypt.hash(createUserDto.password, salt);\n\n      const createdUser = new this.userModel(createUserDto);\n      return createdUser.save();\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async findAll(): Promise {\n    try {\n      return this.userModel.find();\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async findById(id: string): Promise {\n    try {\n      return await this.userModel.findById(id);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async findByUser(name: string, password: string): Promise {\n    try {\n      return await this.userModel.findOne({ name, password }).exec();\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async findByName(name: string): Promise {\n    try {\n      return await this.userModel.findOne({ name }).select('+password').exec();\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async update(id: string, updateUserDto: UpdateUserDto): Promise {\n    try {\n      return await this.userModel.findByIdAndUpdate(id, updateUserDto);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async remove(id: string): Promise {\n    try {\n      return await this.userModel.findByIdAndDelete(id);\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/public/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/public/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/exceptions/http-exception/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/gards/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/gards/auth/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/gards/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/gards/auth/constants.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/middlewares/logger/logger.middleware.ts\n            \n            injectable\n            LoggerMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/middlewares/time-request/time-request.middleware.ts\n            \n            injectable\n            TimeRequestMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/entities/user.entity.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/mongoose : ^10.0.6\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.1\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    4 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            jwtConstants   (src/.../constants.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            UserSchema   (src/.../user.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/decorators/public/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/gards/auth/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jwtConstants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : { secret: 'senhasecreta' }\n                    \n                \n\n\n        \n    \n\n    src/user/entities/user.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
